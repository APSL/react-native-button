exports[`Button Renders 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel={undefined}
  accessibilityTraits={undefined}
  accessible={true}
  hitSlop={undefined}
  onLayout={undefined}
  onResponderGrant={[Function bound touchableHandleResponderGrant]}
  onResponderMove={[Function bound touchableHandleResponderMove]}
  onResponderRelease={[Function bound touchableHandleResponderRelease]}
  onResponderTerminate={[Function bound touchableHandleResponderTerminate]}
  onResponderTerminationRequest={[Function bound touchableHandleResponderTerminationRequest]}
  onStartShouldSetResponder={[Function bound touchableHandleStartShouldSetResponder]}
  style={
    Object {
      "alignItems": "center",
      "alignSelf": "stretch",
      "borderRadius": 8,
      "borderWidth": 1,
      "flexDirection": "row",
      "height": 44,
      "justifyContent": "center",
      "marginBottom": 10,
      "opacity": 1
    }
  }
  testID={undefined}>
  <Text
    accessible={true}
    allowFontScaling={true}
    ellipsizeMode="tail"
    style={
      Array [
        Object {
          "backgroundColor": "transparent",
          "fontSize": 18,
          "textAlign": "center"
        },
        undefined
      ]
    }>
    Button
  </Text>
</View>
`;

exports[`Button Renders disabled 1`] = `
<View
  style={
    Array [
      Object {
        "alignItems": "center",
        "alignSelf": "stretch",
        "borderRadius": 8,
        "borderWidth": 1,
        "flexDirection": "row",
        "height": 44,
        "justifyContent": "center",
        "marginBottom": 10
      },
      undefined,
      Object {
        "opacity": 0.5
      }
    ]
  }>
  <Text
    accessible={true}
    allowFontScaling={true}
    ellipsizeMode="tail"
    style={
      Array [
        Object {
          "backgroundColor": "transparent",
          "fontSize": 18,
          "textAlign": "center"
        },
        undefined
      ]
    }>
    Disabled button
  </Text>
</View>
`;

exports[`Button Renders loading 1`] = `
<View
  style={
    Array [
      Object {
        "alignItems": "center",
        "alignSelf": "stretch",
        "borderRadius": 8,
        "borderWidth": 1,
        "flexDirection": "row",
        "height": 44,
        "justifyContent": "center",
        "marginBottom": 10
      },
      undefined,
      Object {
        "opacity": 0.5
      }
    ]
  }>
  <ActivityIndicator
    animating={true}
    color="black"
    hidesWhenStopped={true}
    size="small"
    style={
      Object {
        "alignSelf": "center",
        "marginLeft": 6,
        "marginRight": 6
      }
    } />
</View>
`;

exports[`Button Renders loading with text 1`] = `
<View
  style={
    Array [
      Object {
        "alignItems": "center",
        "alignSelf": "stretch",
        "borderRadius": 8,
        "borderWidth": 1,
        "flexDirection": "row",
        "height": 44,
        "justifyContent": "center",
        "marginBottom": 10
      },
      undefined,
      Object {
        "opacity": 0.5
      }
    ]
  }>
  <ActivityIndicator
    animating={true}
    color="black"
    hidesWhenStopped={true}
    size="small"
    style={
      Object {
        "alignSelf": "center",
        "marginLeft": 6,
        "marginRight": 6
      }
    } />
  <Text
    accessible={true}
    allowFontScaling={true}
    ellipsizeMode="tail"
    style={
      Array [
        Object {
          "backgroundColor": "transparent",
          "fontSize": 18,
          "textAlign": "center"
        },
        undefined
      ]
    }>
    Loading button with text
  </Text>
</View>
`;

exports[`Button Renders with a inner View 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel={undefined}
  accessibilityTraits={undefined}
  accessible={true}
  hitSlop={undefined}
  onLayout={undefined}
  onResponderGrant={[Function bound touchableHandleResponderGrant]}
  onResponderMove={[Function bound touchableHandleResponderMove]}
  onResponderRelease={[Function bound touchableHandleResponderRelease]}
  onResponderTerminate={[Function bound touchableHandleResponderTerminate]}
  onResponderTerminationRequest={[Function bound touchableHandleResponderTerminationRequest]}
  onStartShouldSetResponder={[Function bound touchableHandleStartShouldSetResponder]}
  style={
    Object {
      "alignItems": "center",
      "alignSelf": "stretch",
      "borderRadius": 8,
      "borderWidth": 1,
      "flexDirection": "row",
      "height": 44,
      "justifyContent": "center",
      "marginBottom": 10,
      "opacity": 1
    }
  }
  testID={undefined}>
  <View />
</View>
`;

exports[`Button Should contain children 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel={undefined}
  accessibilityTraits={undefined}
  accessible={true}
  hitSlop={undefined}
  onLayout={undefined}
  onResponderGrant={[Function bound touchableHandleResponderGrant]}
  onResponderMove={[Function bound touchableHandleResponderMove]}
  onResponderRelease={[Function bound touchableHandleResponderRelease]}
  onResponderTerminate={[Function bound touchableHandleResponderTerminate]}
  onResponderTerminationRequest={[Function bound touchableHandleResponderTerminationRequest]}
  onStartShouldSetResponder={[Function bound touchableHandleStartShouldSetResponder]}
  style={
    Object {
      "alignItems": "center",
      "alignSelf": "stretch",
      "borderRadius": 8,
      "borderWidth": 1,
      "flexDirection": "row",
      "height": 44,
      "justifyContent": "center",
      "marginBottom": 10,
      "opacity": 1
    }
  }
  testID={undefined}>
  <Text
    accessible={true}
    allowFontScaling={true}
    ellipsizeMode="tail"
    style={
      Array [
        Object {
          "backgroundColor": "transparent",
          "fontSize": 18,
          "textAlign": "center"
        },
        undefined
      ]
    }>
    Press me!
  </Text>
</View>
`;

exports[`Button Should react to the onPress event 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel={undefined}
  accessibilityTraits={undefined}
  accessible={true}
  hitSlop={undefined}
  onLayout={undefined}
  onResponderGrant={[Function bound touchableHandleResponderGrant]}
  onResponderMove={[Function bound touchableHandleResponderMove]}
  onResponderRelease={[Function bound touchableHandleResponderRelease]}
  onResponderTerminate={[Function bound touchableHandleResponderTerminate]}
  onResponderTerminationRequest={[Function bound touchableHandleResponderTerminationRequest]}
  onStartShouldSetResponder={[Function bound touchableHandleStartShouldSetResponder]}
  style={
    Object {
      "alignItems": "center",
      "alignSelf": "stretch",
      "borderRadius": 8,
      "borderWidth": 1,
      "flexDirection": "row",
      "height": 44,
      "justifyContent": "center",
      "marginBottom": 10,
      "opacity": 1
    }
  }
  testID={undefined}>
  <Text
    accessible={true}
    allowFontScaling={true}
    ellipsizeMode="tail"
    style={
      Array [
        Object {
          "backgroundColor": "transparent",
          "fontSize": 18,
          "textAlign": "center"
        },
        undefined
      ]
    }>
    Press me!
  </Text>
</View>
`;
